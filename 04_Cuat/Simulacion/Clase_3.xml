

diff21 

		//mio
			def diff21(n):
	  				if (n < 21):
	    		return 21-n
	  		else:
	    		return (n-21)*2

	  //pagina


	  //profesor
	def diff21(n):
	v = abs(n-21)
	  if (n < 21):
	    return v
	  else:
	    return v*2
	
    
parrot_trouble 

    def parrot_trouble(talking, hour):
  if ((talking == True) and ((hour < 7) or (hour > 20))):
    return True
  else:
    return False


makes10 

def makes10(a, b):
  if(a == 10 or b == 10 or a+b == 10):
    return True
  else:
    return False


near_hundred

//mio
def near_hundred(n):
  if ((n > 90 and n < 110) or (n > 190 and n < 210) or n == 90 or n == 110 or n == 190 or n == 210):
    return True
  else:
    return False
    
    
    //pagina
    def near_hundred(n):
  return ((abs(100 - n) <= 10) or (abs(200 - n) <= 10))
  
  
  
  
  
pos_neg 

    //mio
  def pos_neg(a, b, negative):
  if((a < 0 and b > 0 and negative == False) or (a > 0 and b < 0 and negative == False) or (a < 0 and b < 0 and negative == True)):
      return True
  else:
    return False
    
    
    //pagina
    
    def pos_neg(a, b, negative):
  if negative:
    return (a < 0 and b < 0)
  else:
    return ((a < 0 and b > 0) or (a > 0 and b < 0))



not_string 

def not_string(str):
  front = str[0:3]
  if(front == "not"):
    return str
  else:
    return "not " + str



missing_char 

def missing_char(str, n):
  return str[:n]+str[n+1:]


front_back 

def front_back(str):
  
  def front_back(str):
  if(len(str)> 1):
    return str[len(str)-1:len(str)] + str[1:len(str)-1] + str[0:1]
  else:
    return str
    

front3 
    
def front3(str):
  if len(str) < 3:
    front = str
    return front + front + front
  else:
    front = str[0:3]
    return front + front + front
    
    





WARMUP - 2

string_times

def string_times(str, n):
  result = ""
  for i in range(n): 
    result += str
  return result
  
  
  
  front_times 
  
  def front_times(str, n):
  result = ""
  if(len(str) < 3):
    front = str
  else:
    front = str[0:3]
  for i in range(n): 
    result += front
  return result
  
  
  
  
  string_bits 
  
  def string_bits(str):
  result = ""
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result




string_splosion 

def string_splosion(str):
  result = "" 
  for i in range(len(str)+1):
    result += str[0:i]
  return result
      
      
      
      array_count9
      
      def array_count9(nums):
  count = 0
  for num in nums:
    if (num == 9):
      count += 1
  return count

      
      
      array_front9 
      
      //mio
      
      def array_front9(nums):
  i = 0
  resp = False
  for num in nums:
    if( i <4):
      if (num == 9):
        resp = True
      else:
        i+=1
    else:
        resp = False
  return resp
               
               //pagina
               
               def array_front9(nums):
  # First figure the end for the loop
  end = len(nums)
  if end > 4:
    end = 4
  
  for i in range(end):  # loop over index [0, 1, 2, 3]
    if nums[i] == 9:
      return True
  return False
      
      
      
      
      
      array123 
      
      //mio 
      
      def array123(nums):
  resp = False
  for i in range(len(nums)):
    if (nums[i] == 1):
      if (i < len(nums)-2):
        if (nums[i+1] == 2):
          if( nums[i+2] == 3):
            resp = True
          
  return resp

                           
                           //pagina
                           
                           def array123(nums):
  # Note: iterate with length-2, so can use i+1 and i+2 in the loop
  for i in range(len(nums)-2):
    if nums[i]==1 and nums[i+1]==2 and nums[i+2]==3:
      return True
  return False
                           
                           
                           
                           
                    string_match        
                           
                           //mio
                           
                           def string_match(a, b):
  count = 0
  if( len(a) < len(b)):
    for i in range(len(a)-1):
      if (a[i:i+2] == b[i:i+2]):
        count += 1
  else:
     for i in range(len(b)-1):
      if (a[i:i+2] == b[i:i+2]):
        count += 1
  
  
  return count
  
//pagina
      
      def string_match(a, b):
  # Figure which string is shorter.
  shorter = min(len(a), len(b))
  count = 0
  
  # Loop i over every substring starting spot.
  # Use length-1 here, so can use char str[i+1] in the loop
  for i in range(shorter-1):
    a_sub = a[i:i+2]
    b_sub = b[i:i+2]
    if a_sub == b_sub:
      count = count + 1

  return count
      
      
      
      
      String-1 > hello_name
      
      
      
      def hello_name(name):
  return 'Hello ' + name + '!'

      
      
      
      make_abba 
      
      def make_abba(a, b):
  return a +b +b +a

      
      make_tags 
      
      def make_tags(tag, word):
  return '<' + tag + '>' + word + '</' + tag + '>'

      
      
      make_out_word 
      
      def make_out_word(out, word):
  return out[:2] + word + out[2:]

      
      
      
      
      extra_end 
      
      
      def extra_end(str):
  return str[len(str)-2:]+str[len(str)-2:]+str[len(str)-2:]

      
      
      first_two
      
      def first_two(str):
  if (len(str) > 2):
    return str[:2]
  else:
    return str
      
      
      
      
      first_half 
      
      def first_half(str):
  return str[:len(str)/2]

      
      
      without_end 
      
      def without_end(str):
  return str[1:len(str)-1]

      
      
      
      combo_string 
      
      
      def combo_string(a, b):
  if len(a) < len(b):
    short = a
    long = b
  else:
    short = b
    long = a
  return short + long + short

                   
                   
                   
                   non_start 
                   
                   
                   def non_start(a, b):
  return a[1:] + b[1:]

                   
                   
                   
                   left2 
                   
                   def left2(str):
  return str[2:] + str[:2]

                   
                   
                   
                   
                   
                   
                   
                   List-1 > first_last6 

      
      
      def first_last6(nums):
  return ((nums[0] == 6) or (nums[len(nums)-1] == 6))
    
      
      
      same_first_last 
      
      def same_first_last(nums):
  return ((len(nums) > 0) and ( nums[0] == nums[len(nums)-1]))

      
      make_pi 
      
      def make_pi():
  return [3,1,4]

      
      
      common_end 
      
      def common_end(a, b):
  return ((a[0] == b[0]) or (a[len(a)-1] == b[len(b)-1]))
      
      
      
      sum3 
      
      def sum3(nums):
  suma = 0
  for i in range(len(nums)):
    suma+= nums[i]
  return suma

      
      
      rotate_left3 
      
      def rotate_left3(nums):
  return [nums[1],nums[2],nums[0]]

      
      
      reverse3 
      
      def reverse3(nums):
  return [nums[2],nums[1],nums[0]]


      
      max_end3 
      
      def max_end3(nums):
  if(nums[0] > nums[2]):
    max = nums[0]
  else:
    max = nums[2]
  return [max,max,max]

      
      
      sum2 
      
      def sum2(nums):
  if len(nums) == 0:
    return 0
  else:
    if len(nums) == 1:
      return nums[0]
    else:
      return nums[0] + nums[1]

      
      
      
      middle_way 
      
      def middle_way(a, b):
  return [a[1],b[1]]

      
      
      make_ends 
      
      def make_ends(nums):
  return [nums[0],nums[len(nums)-1]] 

      
      
      
      has23 
      
      def has23(nums):
  return ((nums[0] == 2) or (nums[0] == 3) or (nums[1] == 2) or (nums[1] == 3))

      
      
      
      
      
      Logic-1 > cigar_party 
      
      def cigar_party(cigars, is_weekend):
  return (((cigars >= 40) and (cigars <= 60) and not(is_weekend)) or ((cigars >= 40) and is_weekend))

      
      
      
      date_fashion 
      
      
      def date_fashion(you, date):
  result = 1
  if ((you >= 8) or (date >= 8)):
    result = 2
  if((you <= 2) or (date <= 2)):
    result = 0
  return result
      
      
      
      squirrel_play 
      
      def squirrel_play(temp, is_summer):
  min = 60
  if is_summer:
    max = 100
  else:
    max = 90
  return (temp >= min and temp <=max)

                                     
        
                                     
                                     caught_speeding 
                                     
                                     def caught_speeding(speed, is_birthday):
  caso1 = 60
  caso2 = 80
  if is_birthday:
    caso1 += 5
    caso2 += 5
  if speed <= caso1:
    result = 0
  elif speed <= caso2:
    result = 1
  else:
    result = 2
  return result

                     
                     
                     sorta_sum 
                     
                     def sorta_sum(a, b):
  if a+b >= 10 and a+b <= 19:
    return 20
  else:
    return a+b

                            
                            
                            alarm_clock 
                            
                            
                            def alarm_clock(day, vacation):
  if vacation:
    semana = "10:00"
    finde = "off"
  else:
    semana = "7:00"
    finde = "10:00"
  if day > 0 and day < 6:
    return semana
  else:
    return finde
                         
                         
                         
                         love6 
                         
                         def love6(a, b):
  return (a==6) or (b==6) or (a+b==6) or (abs(a-b)==6)
                         
                         
                         
                         
                         in1to10 
                         
                         
                         def in1to10(n, outside_mode):
  if outside_mode:
    return (n>=10 or n<=1)
  else:
    return (n>=1 and n<=10)

                           
                           
                           
                           
                        near_ten
                           
                           def near_ten(num):
  return num%10<= 2 or num%10 >=8
      
      
      
      
      
      
      
      
      Logic-2 > make_bricks 
      
      
      def make_bricks(small, big, goal):
  if(big != 0):
    if((big*5)<=goal):
      if((big*5)+small >=goal):
        return True
      else:
        return False
    elif(((big-1)*5)<=goal):
      if(((big-1)*5)+small >=goal):
        return True
      else:
        return False
    elif(((big-2)*5)<=goal):
      if(((big-2)*5)+small >=goal):
        return True
      else:
        return False
    elif(((big-3)*5)<=goal):
      if(((big-3)*5)+small >=goal):
        return True
      else:
        return False
    else:
      return False
  else:
    if(small >=goal):
      return True
    else:
      return False
      
      
      
      
      lone_sum
      
      def lone_sum(a, b, c):
  result = 0
  if (a != b and a != c):
    result += a
  if (b != a and b != c):
    result += b
  if (c != a and c != b):
    result += c
  return result

      
      
      
      
      lucky_sum
      
      def lucky_sum(a, b, c):
  result = 0
  if(a != 13):
    result +=a
    if(b != 13):
      result +=b
      if(c != 13):
        result +=c
  return result

      
      
      
      no_teen_sum
      
      def fix_teen(n):
  if (n>=13 and n<=19 and n!= 15 and n!=16):
    return 0
  else:
    return n

def no_teen_sum(a, b, c):
  a = fix_teen(a)
  b = fix_teen(b)
  c = fix_teen(c)
  return a+b+c
  
                     
                     
                     
                     round_sum
                     
                     def round10(n):
  if(n%10 >= 5):
    return n+ 10 - (n%10)
  else:
    return n-(n%10)

def round_sum(a, b, c):
  a=round10(a)
  b=round10(b)
  c=round10(c)
  return a+b+c
      
      
      
      
      close_far
      
      def close_far(a, b, c):
  return ((abs(a-b)<=1) and ((abs(a-c)>=2) and (abs(b-c)>=2))) or ((abs(a-c)<=1) and ((abs(a-b)>=2) and (abs(b-c)>=2)))

      
      
      
make_chocolate
      
      def make_chocolate(small, big, goal):
  maxBig = goal / 5
   
  if big >= maxBig:
    if small >= (goal - maxBig * 5):
      return goal - maxBig * 5
  if big < maxBig:
    if small >= (goal - big * 5):
      return goal - big * 5
  return -1
      
      
      
      
      
      
      String-2 > double_char 
      
      def double_char(str):
  resp = ""
  for i in range(len(str)):
    resp += str[i] + str[i] 
  return resp
      
      
      
      count_hi
      
      def count_hi(str):
  resp = 0
  for i in range(len(str)-1):
    if(str[i] == 'h' and str[i+1] == 'i'):
      resp +=1
  return resp

      
      
      cat_dog
      
      def cat_dog(str):
  cat = 0
  dog = 0
  for i in range(len(str)-2):
    if(str[i] == 'c' and str[i+1] == 'a' and str[i+2] == 't'):
      cat += 1
    if(str[i] == 'd' and str[i+1] == 'o' and str[i+2] == 'g'):
      dog += 1
  return cat == dog


      
      count_code
      
      def count_code(str):
  code = 0
  for i in range(len(str)-3):
    if(str[i] == 'c' and str[i+1] == 'o' and str[i+3] == 'e'):
      code += 1
  return code


      
      end_other
      
      def end_other(a, b):
  a = a.lower()
  b = b.lower()
  return a == b[len(b)-(len(a)):] or b == a[len(a)-(len(b)):] 

      
      
      xyz_there
      
      
      def xyz_there(str):
  count = False
  if str[:3] == "xyz":
    count =True
  else:
    for i in range(len(str)-3):
      if(str[i] != '.' and str[i+1] == 'x' and str[i+2] == 'y' and str[i+3] == 'z'):
        count = True
  return count

      
      
      
      count_evens
      
      def count_evens(nums):
  count = 0
  for num in nums:
    if num % 2 == 0:
      count += 1
  return count

      
      
      
      
      List-2 > big_diff 
      
      def big_diff(nums):
  min = nums[0]
  max = nums[0]
  for num in nums:
    if num <= min:
      min = num
    if num >= max:
      max = num
  return max -min

      
      
      centered_average
      
      def centered_average(nums):
  min = nums[0]
  max = nums[0]
  total = 0
  for num in nums:
    if num <= min:
      min = num
    if num >= max:
      max = num
    total += num
  resp = (total -max -min)/(len(nums)-2)
  return resp


      
      sum13
      
      def sum13(nums):
  if(len(nums)==0):
    return 0
  total = 0
  flag = False
  for num in nums:
    if flag:
      flag = False
    else:
      if num != 13:
        total +=num
      else:
        flag =True
      
  return total


      
      
      
      sum67
      
      def sum67(nums):
  if(len(nums)==0):
    return 0
  total = 0
  six = False
  seven = True
  for num in nums:
    if six:
      if num == 7:
        seven = True
        six = False
    else:
      if num == 6:
        six = True
      else:
        total+=num
      
  return total



      has22
      
      
      def has22(nums):
  flag2 = False
  flag = False
  for num in nums:
    if flag:
      if num == 2:
        flag2 =True
      else:
        flag = False
    else:
      if num == 2:
        flag =True
      
  return flag2

      
      
      
      